// <auto-generated />
using System;
using APIProject.Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace APIProject.Domain.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220417171441_AddnewMaterial")]
    partial class AddnewMaterial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("APIProject.Domain.Models.Cart", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerID");

                    b.Property<int>("IsActive");

                    b.Property<long>("Price");

                    b.Property<int>("ProductItemID");

                    b.Property<int>("Quantity");

                    b.Property<long>("SumPrice");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductItemID");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("Status");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("ID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Customer", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Avatar");

                    b.Property<string>("CodeTax");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerTypeID");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("DeviceID");

                    b.Property<string>("Email");

                    b.Property<DateTime?>("ExpireDateOTP");

                    b.Property<int?>("Gender");

                    b.Property<int>("IsActive");

                    b.Property<int?>("IsConfirmOTP");

                    b.Property<int?>("IsConfirmRole");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("OTP");

                    b.Property<string>("Password");

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<long>("Point");

                    b.Property<int>("QtyOTP");

                    b.Property<int>("Status");

                    b.Property<string>("Token");

                    b.HasKey("ID");

                    b.HasIndex("CustomerTypeID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("APIProject.Domain.Models.CustomerType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BonusPointPerKg");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("APIProject.Domain.Models.District", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("ProvinceCode");

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.HasKey("Code");

                    b.ToTable("Districts");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Material", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("macbetong");

                    b.HasKey("ID");

                    b.ToTable("materials");
                });

            modelBuilder.Entity("APIProject.Domain.Models.MemberPointHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("Balance");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerID");

                    b.Property<string>("Description");

                    b.Property<int>("IsActive");

                    b.Property<int?>("OrderID");

                    b.Property<long>("Point");

                    b.Property<int>("Type");

                    b.Property<int>("TypeAdd");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("OrderID");

                    b.ToTable("MemberPointHistories");
                });

            modelBuilder.Entity("APIProject.Domain.Models.News", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsActive");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.Property<int>("TypeNews");

                    b.Property<string>("UrlImage");

                    b.HasKey("ID");

                    b.ToTable("News");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Notification", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("CustomerID");

                    b.Property<string>("CustomerPhone");

                    b.Property<int>("IsActive");

                    b.Property<int>("IsAdmin");

                    b.Property<int?>("NewsID");

                    b.Property<int?>("OrderID");

                    b.Property<string>("ProductCode");

                    b.Property<int?>("ProductID");

                    b.Property<int>("Type");

                    b.Property<int>("Viewed");

                    b.HasKey("ID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Order", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuyerAddress");

                    b.Property<string>("BuyerName")
                        .HasMaxLength(100);

                    b.Property<string>("BuyerPhone")
                        .HasMaxLength(15);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerID");

                    b.Property<string>("DeclineNote");

                    b.Property<int?>("DeclineRequest");

                    b.Property<int>("DistrictID");

                    b.Property<int>("IsActive");

                    b.Property<string>("Note");

                    b.Property<string>("NoteComplain");

                    b.Property<int>("PaymentStatus");

                    b.Property<int?>("PaymentType");

                    b.Property<long>("ProductSumPrice");

                    b.Property<int>("ProvinceID");

                    b.Property<long?>("ShipFee");

                    b.Property<int>("ShipQuoteStatus");

                    b.Property<int>("Status");

                    b.Property<long>("TotalPrice");

                    b.Property<double>("TotalWeight");

                    b.Property<string>("UrlVnpay");

                    b.Property<long?>("UsePoint");

                    b.Property<int>("WardID");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("WardID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("APIProject.Domain.Models.OrderComplainImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl");

                    b.Property<int>("OrderID");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderComplainImages");
                });

            modelBuilder.Entity("APIProject.Domain.Models.OrderDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsActive");

                    b.Property<int>("OrderID");

                    b.Property<long>("Price");

                    b.Property<int>("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<long>("SumPrice");

                    b.Property<double>("Weight");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("APIProject.Domain.Models.OrderHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsActive");

                    b.Property<int>("OrderID");

                    b.Property<int>("Status");

                    b.HasKey("ID");

                    b.HasIndex("OrderID");

                    b.ToTable("OrderHistories");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Permission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Product", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryID");

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("EnglishName");

                    b.Property<string>("Ingredient")
                        .HasMaxLength(150);

                    b.Property<int>("IsActive");

                    b.Property<string>("LatinName");

                    b.Property<int>("MinQuantityStorage");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<double>("NetWeight");

                    b.Property<string>("Origin")
                        .HasMaxLength(150);

                    b.Property<string>("Size")
                        .HasMaxLength(150);

                    b.Property<int>("Status");

                    b.Property<string>("StorageTemperature")
                        .HasMaxLength(150);

                    b.Property<int?>("Type");

                    b.Property<string>("Unit");

                    b.Property<string>("Usage")
                        .HasMaxLength(150);

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("APIProject.Domain.Models.ProductImage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageUrl");

                    b.Property<int>("ProductID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("APIProject.Domain.Models.ProductItem", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerTypeID");

                    b.Property<int>("IsActive");

                    b.Property<long>("OriginalPrice");

                    b.Property<long>("Price");

                    b.Property<int>("ProductID");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductItems");
                });

            modelBuilder.Entity("APIProject.Domain.Models.ProductStorage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("ExpiredDate");

                    b.Property<int>("IsActive");

                    b.Property<string>("LotNo");

                    b.Property<DateTime?>("ManufactureDate");

                    b.Property<int>("ProductID");

                    b.Property<int>("Quantity");

                    b.Property<int?>("StorageID");

                    b.Property<string>("Supplier");

                    b.HasKey("ID");

                    b.HasIndex("ProductID");

                    b.HasIndex("StorageID");

                    b.ToTable("ProductStorages");
                });

            modelBuilder.Entity("APIProject.Domain.Models.ProductStorageHistory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Balance");

                    b.Property<string>("Code");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsActive");

                    b.Property<long>("Price");

                    b.Property<int>("ProductStorageID");

                    b.Property<int>("Quantity");

                    b.Property<int>("Type");

                    b.HasKey("ID");

                    b.HasIndex("ProductStorageID");

                    b.ToTable("ProductStorageHistories");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Province", b =>
                {
                    b.Property<int>("Code")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.HasKey("Code");

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("APIProject.Domain.Models.ReceiveAddress", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("CustomerID");

                    b.Property<int>("DistrictID");

                    b.Property<int>("IsActive");

                    b.Property<int>("IsDefault");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<int>("ProvinceID");

                    b.Property<int>("WardID");

                    b.HasKey("ID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("WardID");

                    b.ToTable("ReceiveAddresses");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Role", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("APIProject.Domain.Models.RolePermission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsActive");

                    b.Property<int>("PermissionID");

                    b.Property<int>("RoleID");

                    b.HasKey("ID");

                    b.HasIndex("PermissionID");

                    b.HasIndex("RoleID");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Storage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsActive");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("Status");

                    b.HasKey("ID");

                    b.ToTable("Storages");
                });

            modelBuilder.Entity("APIProject.Domain.Models.StorageExport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<string>("Condition");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Customer");

                    b.Property<DateTime>("ExportDate");

                    b.Property<int>("IsActive");

                    b.Property<string>("Note");

                    b.Property<string>("NumberCar");

                    b.Property<int>("ProvinceID");

                    b.Property<string>("Reason");

                    b.Property<string>("ReceiverName");

                    b.Property<int>("StorageID");

                    b.Property<long>("TotalPrice");

                    b.Property<double>("TotalWeight");

                    b.HasKey("ID");

                    b.HasIndex("ProvinceID");

                    b.HasIndex("StorageID");

                    b.ToTable("StorageExports");
                });

            modelBuilder.Entity("APIProject.Domain.Models.StorageExportDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsActive");

                    b.Property<long>("Price");

                    b.Property<int>("ProductStorageID");

                    b.Property<int>("Quantity");

                    b.Property<int>("StorageExportID");

                    b.Property<long>("TotalPrice");

                    b.Property<double>("TotalWeight");

                    b.HasKey("ID");

                    b.HasIndex("ProductStorageID");

                    b.HasIndex("StorageExportID");

                    b.ToTable("StorageExportDetails");
                });

            modelBuilder.Entity("APIProject.Domain.Models.StorageImport", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("ImportDate");

                    b.Property<int>("IsActive");

                    b.Property<int>("StorageID");

                    b.Property<long>("TotalPrice");

                    b.Property<double>("TotalWeight");

                    b.HasKey("ID");

                    b.HasIndex("StorageID");

                    b.ToTable("StorageImports");
                });

            modelBuilder.Entity("APIProject.Domain.Models.StorageImportDetail", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int>("IsActive");

                    b.Property<string>("Note");

                    b.Property<long>("Price");

                    b.Property<int>("ProductStorageID");

                    b.Property<int>("Quantity");

                    b.Property<int>("StorageImportID");

                    b.Property<long>("TotalPrice");

                    b.Property<double>("TotalWeight");

                    b.HasKey("ID");

                    b.HasIndex("ProductStorageID");

                    b.HasIndex("StorageImportID");

                    b.ToTable("StorageImportDetails");
                });

            modelBuilder.Entity("APIProject.Domain.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<int>("IsActive");

                    b.Property<string>("Password");

                    b.Property<string>("Phone")
                        .HasMaxLength(15);

                    b.Property<int>("RoleID");

                    b.Property<int>("Status");

                    b.Property<string>("Token");

                    b.Property<string>("Username")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("RoleID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Ward", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("District_id");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Type")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("Wards");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Cart", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.ProductItem", "ProductItem")
                        .WithMany()
                        .HasForeignKey("ProductItemID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.Customer", b =>
                {
                    b.HasOne("APIProject.Domain.Models.CustomerType", "CustomerType")
                        .WithMany()
                        .HasForeignKey("CustomerTypeID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.MemberPointHistory", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID");
                });

            modelBuilder.Entity("APIProject.Domain.Models.Order", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.OrderComplainImage", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Order", "Order")
                        .WithMany("OrderComplainImages")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.OrderDetail", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.OrderHistory", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Order", "Order")
                        .WithMany("OrderHistories")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.Product", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");
                });

            modelBuilder.Entity("APIProject.Domain.Models.ProductImage", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.ProductItem", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Product", "Product")
                        .WithMany("ProductItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.ProductStorage", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageID");
                });

            modelBuilder.Entity("APIProject.Domain.Models.ProductStorageHistory", b =>
                {
                    b.HasOne("APIProject.Domain.Models.ProductStorage", "ProductStorage")
                        .WithMany()
                        .HasForeignKey("ProductStorageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.ReceiveAddress", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Customer", "Customer")
                        .WithMany("ReceiveAddresses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.Ward", "Ward")
                        .WithMany()
                        .HasForeignKey("WardID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.RolePermission", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Permission", "Permission")
                        .WithMany()
                        .HasForeignKey("PermissionID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.Role", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.StorageExport", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Province", "Province")
                        .WithMany()
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.StorageExportDetail", b =>
                {
                    b.HasOne("APIProject.Domain.Models.ProductStorage", "ProductStorage")
                        .WithMany()
                        .HasForeignKey("ProductStorageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.StorageExport", "StorageExport")
                        .WithMany("StorageExportDetails")
                        .HasForeignKey("StorageExportID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.StorageImport", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Storage", "Storage")
                        .WithMany()
                        .HasForeignKey("StorageID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.StorageImportDetail", b =>
                {
                    b.HasOne("APIProject.Domain.Models.ProductStorage", "ProductStorage")
                        .WithMany()
                        .HasForeignKey("ProductStorageID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("APIProject.Domain.Models.StorageImport", "StorageImport")
                        .WithMany("StorageImportDetails")
                        .HasForeignKey("StorageImportID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("APIProject.Domain.Models.User", b =>
                {
                    b.HasOne("APIProject.Domain.Models.Role", "role")
                        .WithMany()
                        .HasForeignKey("RoleID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
